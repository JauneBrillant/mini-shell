#!/usr/bin/env python3

import os
import sys
import signal


def builtin_echo(args):
    print(" ".join(args))


def builtin_exit(args):
    exit()


BUILTIN_COMMAND_FUNC_MAPPING = {
    "echo": builtin_echo,
    "exit": builtin_exit,
}


def find_command(command):
    # 相対PATHへの対応
    if "/" in command:
        if os.path.exists(command):
            return command
        return None

    # 環境変数pathの値を取得し、ループさせる
    for path_dir in os.environ["PATH"].split(":"):
        # コマンドのフルパスを生成
        command_path = os.path.join(path_dir, command)
        # pathが存在し、ディレクトリでない場合
        if os.path.exists(command_path) and not os.path.isdir(command_path):
            return command_path
    return None


def set_stdio(stdin_fd=None, stdout_fd=None):
    if stdin_fd is not None:
        os.dup2(stdin_fd, sys.stdin.fileno())

    if stdout_fd is not None:
        os.dup2(stdout_fd, sys.stdout.fileno())


def run_command(tokens, stdin_fd=None, stdout_fd=None):
    command = tokens[0]
    args = tokens[1:]

    if command in BUILTIN_COMMAND_FUNC_MAPPING:
        # 内部コマンド
        func = BUILTIN_COMMAND_FUNC_MAPPING[command]
        func(args)
    else:
        # 外部コマンド
        command_path = find_command(command)

        if command_path is None:
            print(f"{command}: command not found", file=sys.stderr)
            return

        pid = os.fork()

        if pid == 0:
            set_stdio(stdin_fd, stdout_fd)

            command_basename = os.path.basename(command_path)
            os.execve(command_path, [command_basename] + args, os.environ)
        else:
            os.waitpid(pid, 0)


def interpret_line(line):
    # コメントへの対応
    if line.strip().startswith("#"):
        return

    tokens = line.split()

    if len(tokens) == 0:
        return

    redirection_count = tokens.count(">")
    pipe_count = tokens.count("|")

    if redirection_count + pipe_count >= 2:
        print("More than 2 redirections or pipes are not supported", file=sys.stderr)
        return

    if redirection_count == 1:
        redirection_index = tokens.index(">")
        command_and_args = tokens[:redirection_index]
        stdout_file_name = tokens[redirection_index + 1]

        stdout_file = open(stdout_file_name, "w")
        stdout_fd = stdout_file.fileno()

        run_command(command_and_args, stdout_fd=stdout_fd)

        os.close(stdout_fd)

    elif pipe_count == 1:
        # TODO パイプを実装
        pass
    else:
        run_command(tokens)

    run_command(tokens)


def sigint_hander(signum, frame):
    pass


def main():
    if len(sys.argv) >= 2:
        file_name = sys.argv[1]
    else:
        file_name = None

    if file_name is None:
        # インタラクティブシェルの場合
        signal.signal(signal.SIGINT, sigint_hander)

        while True:
            line = input("> ")
            interpret_line(line)

    else:
        # シェルスクリプトの場合
        with open(file_name) as f:
            for line in f:
                interpret_line(line)


if __name__ == "__main__":
    main()
