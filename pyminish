#!/usr/bin/env python3

import os
import sys
import signal


def builtin_echo(args):
    print(" ".join(args))


def builtin_exit(args):
    exit()


BUILTIN_COMMAND_FUNC_MAPPING = {
    "echo": builtin_echo,
    "exit": builtin_exit,
}


def find_command(command):
    # 相対PATHへの対応
    if "/" in command:
        if os.path.exists(command):
            return command
        return None

    # 環境変数pathの値を取得し、ループさせる
    for path_dir in os.environ["PATH"].split(":"):
        # コマンドのフルパスを生成
        command_path = os.path.join(path_dir, command)
        # pathが存在し、ディレクトリでない場合
        if os.path.exists(command_path) and not os.path.isdir(command_path):
            return command_path
    return None


def interpret_line(line):
    # コメントへの対応
    if line.strip().startswith("#"):
        return

    tokens = line.split()

    if len(tokens) == 0:
        return

    command = tokens[0]
    args = tokens[1:]

    if command in BUILTIN_COMMAND_FUNC_MAPPING:
        func = BUILTIN_COMMAND_FUNC_MAPPING[command]
        func(args)
    else:
        command_path = find_command(command)

        if command_path is None:
            # コマンドが見つかりませんでした。と標準エラー出力に出力
            print(f"{command}: command not found", file=sys.stderr)
            return

        # 子プロセスの作成
        pid = os.fork()

        if pid == 0:
            # /usr/bin/catであればcatの部分を取り出す
            command_basename = os.path.basename(command_path)
            os.execve(command_path, [command_basename] + args, os.environ)
        else:
            os.waitpid(pid, 0)


def sigint_hander(signum, frame):
    pass


def main():
    if len(sys.argv) >= 2:
        file_name = sys.argv[1]
    else:
        file_name = None

    if file_name is None:
        # インタラクティブシェルの場合
        signal.signal(signal.SIGINT, sigint_hander)

        while True:
            line = input("> ")
            interpret_line(line)

    else:
        # シェルスクリプトの場合
        with open(file_name) as f:
            for line in f:
                interpret_line(line)


if __name__ == "__main__":
    main()
